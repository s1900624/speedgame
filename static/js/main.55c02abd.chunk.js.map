{"version":3,"sources":["components/circle/index.js","components/circle/circle.js","components/game-over/index.js","components/game-over/game-over.js","components/app/app.js","components/app/index.js","index.js"],"names":["Circle","active","bgColor","clickHandler","text","onClick","className","GameOver","score","closeHandler","id","colors","hbcr","App","state","result","gameOver","activeCircle","attemps","speed","interval","startGame","setActiveCircle","endGame","clearInterval","setState","Math","round","min","max","nextActive","clearTimeout","floor","random","setTimeout","bind","circleList","map","color","index","key","this","Component","ReactDOM","render","document","getElementById"],"mappings":"uTAEeA,G,MCCA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,KAC5C,OACI,yBACIC,QAASF,EACTG,UAAS,iBAAYJ,EAAZ,YAAuBD,IAC/BG,KCNEG,G,MCCE,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aACvB,OACI,yBAAKC,GAAG,aACJ,6BACI,0CACA,4CAAkBF,IAEtB,6BACI,4BAAQF,UAAU,eAAeD,QAASI,GAA1C,aCPVE,G,MAAS,CAAC,QAAS,QAAS,QAAS,UACrCC,EAAO,CAAC,IAAK,IAAK,IAAK,K,ICHdC,E,2MDUXC,MAAQ,CACNC,OAAQ,EACRC,UAAU,EACVC,aAAc,EACdC,QAAS,EACTC,MAAO,K,EAGTC,SAAW,K,EAEXC,UAAY,WACV,EAAKC,mB,EAGPC,QAAU,WACRC,cAAc,EAAKJ,UACnB,EAAKK,SAAS,CACZT,UAAU,K,EAIdb,aAAe,SAACO,GAAQ,IAAD,EAC0B,EAAKI,MAA9CC,EADe,EACfA,OAAQG,EADO,EACPA,QAASD,EADF,EACEA,aAAcE,EADhB,EACgBA,MACrCJ,GAAU,EACVG,GAAW,EACPD,IAAiBP,GACnB,EAAKe,SAAS,CACZV,OAAQA,EACRI,MAAOO,KAAKC,MAAc,GAARR,KAEpB,EAAKG,oBAEL,EAAKG,SAAS,CACZP,QAASA,IAEXA,GAAW,EAAI,EAAKK,UAAY,EAAKD,oB,EAIzCA,gBAAkB,WAChB,IA7CgBM,EAAKC,EA6CjBC,EAAa,KADK,EAEU,EAAKhB,MAA7BG,EAFc,EAEdA,aAAcE,EAFA,EAEAA,MACtBY,aAAa,EAAKX,UAClB,GAhDgBQ,EAiDY,EAjDPC,EAiDU,EAA7BC,EAhDEJ,KAAKM,MAAMN,KAAKO,UAAYJ,EAAMD,EAAM,IAAMA,QAiD1CX,IAAiBa,GAEzB,EAAKV,SAAWc,WAAW,EAAKZ,gBAAgBa,KAArB,gBAAiChB,GAC5D,EAAKM,SAAS,CACZR,aAAca,K,EAIlBrB,aAAe,WACb,EAAKgB,SAAS,CACZT,UAAU,EACVD,OAAQ,EACRE,aAAc,EACdC,QAAS,EACTC,MAAO,O,wEAID,IAAD,OACDiB,EAAazB,EAAO0B,KAAI,SAACC,EAAOC,GAAW,IACzCtB,EAAiB,EAAKH,MAAtBG,aACR,OACI,kBAAC,EAAD,CACIuB,IAAKD,EACLrC,QAASoC,EACTnC,aAAc,kBAAM,EAAKA,aAAcoC,EAAM,IAC7CtC,OAAQgB,IAAkBsB,EAAQ,EAAK,SAAW,GAClDnC,KAAMQ,EAAK2B,QAKrB,OACI,yBAAKjC,UAAU,OACb,iCACImC,KAAK3B,MAAME,UACb,oCACE,yBAAKV,UAAU,mBACb,0CACA,0CAAgBmC,KAAK3B,MAAMC,QAC3B,uCAAa0B,KAAK3B,MAAMI,SACxB,qCAAYQ,KAAKC,MAAMc,KAAK3B,MAAMK,OAAS,IAA3C,QACA,6BACE,4BAAQb,UAAU,eAAeD,QAASoC,KAAKpB,WAA/C,cACA,4BAAQf,UAAU,aAAaD,QAASoC,KAAKlB,SAA7C,cAGJ,yBAAKjB,UAAU,oBACZ8B,KAKP,8BACGK,KAAK3B,MAAME,UACZ,yBAAKV,UAAU,kBACb,kBAAC,EAAD,CACIE,MAAQiC,KAAK3B,MAAMC,OACnBN,aAAcgC,KAAKhC,sB,GAxGnBiC,aENlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.55c02abd.chunk.js","sourcesContent":["import Circle from './circle';\r\n\r\nexport default Circle;\r\n","import React from 'react';\r\nimport './circle.css'\r\n\r\nconst Circle = ({active, bgColor, clickHandler, text}) => {\r\n    return (\r\n        <div\r\n            onClick={clickHandler}\r\n            className={`circle ${bgColor} ${active}`}>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Circle;","import GameOver from './game-over';\r\n\r\nexport default GameOver;\r\n","import React from \"react\";\r\nimport \"./game-over.css\";\r\n\r\nconst GameOver = ( {score, closeHandler} ) => {\r\n    return (\r\n        <div id=\"container\">\r\n            <div>\r\n                <h3>Game over!</h3>\r\n                <p>Your score is {score}</p>\r\n            </div>\r\n            <div>\r\n                <button className=\"button-close\" onClick={closeHandler}>Close</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameOver;","import React, { Component } from 'react';\nimport Circle from '../circle';\nimport GameOver from '../game-over';\nimport './app.css'\nconst colors = ['black', 'black', 'black', 'black'];\nconst hbcr = ['H', 'B', 'C', 'R'];\n\nfunction getRandomInt(min, max) {\n  return (Math.floor(Math.random() * (max - min + 1)) + min);\n}\n\nclass App extends Component {\n    state = {\n      result: 0,\n      gameOver: false,\n      activeCircle: 0,\n      attemps: 3,\n      speed: 1000,\n    };\n\n    interval = null;\n\n    startGame = () => {\n      this.setActiveCircle();\n    };\n\n    endGame = () => {\n      clearInterval(this.interval);\n      this.setState({\n        gameOver: true\n      })\n    };\n\n    clickHandler = (id) => {\n      let { result, attemps, activeCircle, speed } = this.state;\n      result += 1;\n      attemps -= 1;\n      if (activeCircle === id) {\n        this.setState({\n          result: result,\n          speed: Math.round(speed * 0.7),\n        });\n        this.setActiveCircle();\n      } else {\n        this.setState({\n          attemps: attemps,\n        });\n        attemps <= 0 ? this.endGame() : this.setActiveCircle();\n      }\n    };\n\n    setActiveCircle = () => {\n      let nextActive = null;\n      const { activeCircle, speed } = this.state;\n      clearTimeout(this.interval);\n      do {\n        nextActive = getRandomInt(1, 4);\n      } while(activeCircle === nextActive);\n\n      this.interval = setTimeout(this.setActiveCircle.bind(this), speed);\n      this.setState({\n        activeCircle: nextActive\n      });\n    };\n\n    closeHandler = () => {\n      this.setState({\n        gameOver: false,\n        result: 0,\n        activeCircle: 0,\n        attemps: 3,\n        speed: 1000,\n      });\n    };\n\n    render() {\n      const circleList = colors.map((color, index) => {\n      const { activeCircle } = this.state;\n      return (\n          <Circle\n              key={index}\n              bgColor={color}\n              clickHandler={() => this.clickHandler((index+1))}\n              active={activeCircle === (index + 1) ? \"active\" : \"\"}\n              text={hbcr[index]}\n          />\n      );\n    });\n\n    return (\n        <div className=\"App\">\n          <header>\n            {!this.state.gameOver &&\n            <>\n              <div className='start-container'>\n                <h1>Speed Game</h1>\n                <p>Your score: {this.state.result}</p>\n                <p>Attemps: {this.state.attemps}</p>\n                <p>Speed: { Math.round(this.state.speed) / 1000 } sec</p>\n                <div>\n                  <button className=\"button-start\" onClick={this.startGame}>Start Game</button>\n                  <button className=\"button-end\" onClick={this.endGame}>End Game</button>\n                </div>\n              </div>\n              <div className='circle-container'>\n                {circleList}\n              </div>\n            </>\n            }\n          </header>\n          <main>\n            {this.state.gameOver &&\n            <div className='exit-container'>\n              <GameOver\n                  score={ this.state.result}\n                  closeHandler={this.closeHandler}\n              />\n            </div>}\n          </main>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","import App from './app';\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/app';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}